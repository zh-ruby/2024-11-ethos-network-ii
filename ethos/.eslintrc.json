{
  "root": true,
  "env": {
    "es2022": true
  },
  "extends": [
    "eslint:recommended",
    "love",
    "plugin:vitest/recommended",
    "prettier",
    "plugin:react-hooks/recommended"
  ],
  "plugins": [
    "unicorn",
    "vitest",
    "prettier",
    "@stylistic/js"
  ],
  "parserOptions": {
    "ecmaVersion": 2022
  },
  "rules": {
    "@stylistic/js/padding-line-between-statements": [
      "error",
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "if"
      },
      {
        "blankLine": "any",
        "prev": "if",
        "next": "if"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "for"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "export"
      },
      {
        "blankLine": "any",
        "prev": "export",
        "next": "export"
      },
      {
        "blankLine": "always",
        "prev": "import",
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": "import",
        "next": "import"
      }
    ],
    "@typescript-eslint/consistent-type-definitions": [
      "error",
      "type"
    ],
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports",
        "fixStyle": "inline-type-imports"
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "variableLike",
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow",
        "format": [
          "camelCase",
          "PascalCase",
          "UPPER_CASE"
        ]
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      }
    ],
    "@typescript-eslint/strict-boolean-expressions": "off",
    "array-callback-return": "off",
    "import/consistent-type-specifier-style": ["error", "prefer-inline"],
    "import/no-duplicates": ["error", { "prefer-inline": true }],
    "import/order": [
      "error",
      {
        "alphabetize": {
          "order": "asc"
        },
        "warnOnUnassignedImports": true
      }
    ],
    "no-implicit-coercion": "error",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ImportDeclaration[source.value=/\\.json$/]:not(:has(ImportAttribute[key.name='type'][value.value='json']))",
        "message": "JSON imports must include `assert { type: \"json\" }` for ESM compatibility with Node.js in echo."
      }
    ],
    "no-restricted-imports": ["error", {
      "patterns": [
        {
          "group": ["@ethos/*/*"],
          "message": "Don't use deep imports. If you need to expose something from @ethos/* package, export it from index.ts file."
        },
        {
          "group": ["**/../echo/*"],
          "message": "We are trying to minimize direct imports between services. If you need to use something from another service, consider extracting the type to a package (e.g., @ethos/domain) or localizing it to just several files and ignore the rule there. For example, services/web/src/services/echo.ts or services/web/src/types/activity.ts"
        },
        {
          "group": ["components/icons/*", "!components/icons/*.svg"],
          "message": "All icons should be imported from the components/icons/index.ts file"
        }
      ]
    }
  ],
    "prettier/prettier": "error",
    "unicorn/prefer-node-protocol": "error",
    "no-console": ["error", { "allow": ["warn", "error"] }],
    "vitest/no-disabled-tests": "error"
  },
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": [
          "./tsconfig.json",
          "./packages/**/tsconfig.json",
          "./services/**/tsconfig.json",
          "./standalone/**/tsconfig.json"
        ]
      }
    }
  },
  "overrides": [
    {
      "files": [
        "./packages/common-ui/**/*.ts",
        "./packages/common-ui/**/*.tsx"
      ],
      "settings": {
        "react": {
          "version": "detect"
        }
      },
      "rules": {
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-floating-promises": "off",
        "@typescript-eslint/no-misused-promises": "off",
        "@typescript-eslint/triple-slash-reference": "off",
        "react/forbid-component-props": [
          "error",
          {
            "forbid": [
              { "propName": "style", "message": "Use the 'css' prop from '@emotion/react' instead. More details: https://emotion.sh/docs/css-prop#use-the-css-prop" }
            ]
          }
        ],
        "react/forbid-dom-props": [
          "error",
          {
            "forbid": [
              { "propName": "style", "message": "Use the 'css' prop from '@emotion/react' instead. More details: https://emotion.sh/docs/css-prop#use-the-css-prop" }
            ]
          }
        ],
        "react/jsx-child-element-spacing": "error",
        "react/jsx-curly-brace-presence": ["error", { "props": "never", "children": "never" }],
        "react/jsx-fragments": ["error", "syntax"],
        "react/jsx-no-useless-fragment": "error",
        "react/no-invalid-html-attribute": "error",
        "react/no-unknown-property": ["error", { "ignore": ["css"] }],
        "react/prop-types": "off",
        "react/self-closing-comp": ["error", { "component": true, "html": true }]
      }
    },
    {
      "files": [
        "./services/web/**/*.ts",
        "./services/web/**/*.tsx"
      ],
      "extends": [
        "plugin:@tanstack/eslint-plugin-query/recommended",
        "plugin:@next/next/recommended",
        "plugin:react/recommended",
        "plugin:react/jsx-runtime"
      ],
      "settings": {
        "next": {
          "rootDir": "services/web/"
        },
        "react": {
          "version": "detect"
        }
      },
      "rules": {
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-floating-promises": "off",
        "@typescript-eslint/no-misused-promises": "off",
        "@typescript-eslint/triple-slash-reference": "off",
        "react/forbid-component-props": [
          "error",
          {
            "forbid": [
              { "propName": "style", "message": "Use the 'css' prop from '@emotion/react' instead. More details: https://emotion.sh/docs/css-prop#use-the-css-prop" }
            ]
          }
        ],
        "react/forbid-dom-props": [
          "error",
          {
            "forbid": [
              { "propName": "style", "message": "Use the 'css' prop from '@emotion/react' instead. More details: https://emotion.sh/docs/css-prop#use-the-css-prop" }
            ]
          }
        ],
        "react/jsx-child-element-spacing": "error",
        "react/jsx-curly-brace-presence": ["error", { "props": "never", "children": "never" }],
        "react/jsx-fragments": ["error", "syntax"],
        "react/jsx-no-useless-fragment": "error",
        "react/no-invalid-html-attribute": "error",
        "react/no-unknown-property": ["error", { "ignore": ["css"] }],
        "react/prop-types": "off",
        "react/self-closing-comp": ["error", { "component": true, "html": true }]
      }
    },
    {
      "files": [
        "./standalone/twitter-chrome-extension/**/*.ts",
        "./standalone/twitter-chrome-extension/**/*.tsx"
      ],
      "extends": [
        "plugin:react/recommended",
        "plugin:react/jsx-runtime"
      ],
      "settings": {
        "react": {
          "version": "detect"
        }
      },
      "rules": {
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-floating-promises": "off",
        "@typescript-eslint/no-misused-promises": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/triple-slash-reference": "off",
        "no-console": "off",
        "react/jsx-child-element-spacing": "error",
        "react/jsx-curly-brace-presence": ["error", { "props": "never", "children": "never" }],
        "react/jsx-fragments": ["error", "syntax"],
        "react/jsx-no-useless-fragment": "error",
        "react/no-invalid-html-attribute": "error",
        "react/no-unknown-property": ["error", { "ignore": ["css"] }],
        "react/prop-types": "off",
        "react/self-closing-comp": ["error", { "component": true, "html": true }]
      }
    },
    {
      "files": [
        "./services/emporos/**/*.ts",
        "./services/emporos/**/*.tsx"
      ],
      "plugins": ["react"],
      "extends": [
        "plugin:react/recommended",
        "plugin:react/jsx-runtime"
      ],
      "settings": {
        "react": {
          "version": "detect"
        },
        "formComponents": ["Form"],
        "linkComponents": [
          { "name": "Link", "linkAttribute": "to" },
          { "name": "NavLink", "linkAttribute": "to" }
        ]
      },
      "rules": {
        "no-restricted-imports": ["error", {
          "paths": [
            {
              "name": "@remix-run/react",
              "importNames": ["useLoaderData", "defer", "json"],
              "message": "Prefer typed* variants from the 'remix-typedjson' package for broader data type support."
            }
          ]
        }],
        "@typescript-eslint/explicit-function-return-type": "off",
        "import/extensions": [
          "error",
          "ignorePackages",
          {
            "ts": "always",
            "tsx": "always"
          }
        ],
        "react/jsx-child-element-spacing": "error",
        "react/jsx-curly-brace-presence": ["error", { "props": "never", "children": "never" }],
        "react/jsx-fragments": ["error", "syntax"],
        "react/jsx-no-useless-fragment": "error",
        "react/no-invalid-html-attribute": "error",
        "react/no-unknown-property": ["error", { "ignore": ["css"] }],
        "react/prop-types": "off",
        "react/self-closing-comp": ["error", { "component": true, "html": true }],
        "@typescript-eslint/no-floating-promises": "off",
        "@typescript-eslint/no-misused-promises": "off",
        "@typescript-eslint/no-throw-literal": "off"
      }
    }
  ]
}
